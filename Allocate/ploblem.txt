Question]  테이블에 손님들이 최대한 많이 배정할수 있도록 SCORE를 최소화 하라
외부 함수는 사용할수 없다. (#include를 통한 외부 함수 사용 금지)
Main함수는 다음과 같으며 이를 구현하는 allocator_init,allocate, clear 함수를 작성하라

[이름.cpp]
// DO NOT ANY INCLUDE
void allocator_init();
int allocate (int group, int len);
void clear (int group);

[main.cpp] 
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>

#define ORDER 12
#define SIZE (1 << ORDER) 
#define MAX_GROUPS 100

static char table[SIZE];
static int position[MAX_GROUPS];
static int size[MAX_GROUPS];
static int used[MAX_GROUPS];

void allocator_init();
int allocate (int group, int len);
void clear (int group);

int main()
{
	char null[SIZE/16]={0,};
	unsigned long long SCORE=0;
	int run =0;
	for (int c=0; c<10; c++)
	{
		memset(table, 0, sizeof(table));
		for (int i=0; i<MAX_GROUPS; i++)
		{
			position[i]=-1;
			size[i]= 1 << (rand()%(ORDER-3));
		}
		allocator_init();
		clock_t t = clock();
		
		int idx=0;
		for (int i=0; i<100000; i++)
		{
			idx++;
			int group = rand()%(MAX_GROUPS-1)+1;
			int s = size[group];

			if (used[group] == 0)
			{
				int offset = allocate(group, s);

				if (offset <0)
				{
					SCORE +=s;
				}
				else if (offset + s > SIZE)
				{
					SCORE += 100000000;
				}
				else if(memcmp(&table[offset], null, s)){
					SCORE += 100000000;
					offset = allocate(group, s);
				}
				else
				{
					memset(&table[offset], group, s);
					position[group]=offset;
				}
				used[group]=1;
			}
			else
			{
				if (position[group] != -1)
				{
					clear(group);
					memset(&table[position[group]], 0, s);
					position[group]=-1;
				}
				used[group]=0;
			}		
		}
		run += clock()-t;
	}
	SCORE += run;
	printf("SCORE = %llu\n", SCORE);
	return 0;
}
